{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routing.ts","webpack:///./src/app/dashboard/dashboard.component.css","webpack:///./src/app/dashboard/dashboard.component.html","webpack:///./src/app/dashboard/dashboard.component.ts","webpack:///./src/app/investment-strategies/investment-strategies.component.css","webpack:///./src/app/investment-strategies/investment-strategies.component.html","webpack:///./src/app/investment-strategies/investment-strategies.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/register/register.component.css","webpack:///./src/app/register/register.component.html","webpack:///./src/app/register/register.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \".custom-navbar{\\r\\n    top:0;\\r\\n    color:white;\\r\\n    padding:10px;\\r\\n    padding-top:20px;\\r\\n}\"","module.exports = \"<div id=\\\"navbar\\\" class=\\\"custom-navbar\\\" *ngIf=\\\"this.router.url!='/Login' && this.router.url!='/Register'&& this.router.url!= '' \\\" align=\\\"right\\\">\\n        <span class=\\\"pr-5\\\"><a routerLink=\\\"/Dashboard\\\" style=\\\"color:white;text-transform: uppercase;letter-spacing: 2px;\\\">Home</a></span>\\n        <span class=\\\"pr-5\\\"><a routerLink=\\\"/Dashboard\\\" style=\\\"color:white;text-transform: uppercase;letter-spacing: 2px;\\\">Start investing</a></span>\\n        <span class=\\\"pr-5\\\"><a routerLink=\\\"/Dashboard\\\" style=\\\"color:white;text-transform: uppercase;letter-spacing: 2px;\\\">My Account</a></span>\\n</div>\\n\\n<router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\nimport {Router} from \"@angular/router\"\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'hackathon-app';\n\n  constructor(public router:Router){}\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\n\n\nimport { routing } from './app.routing';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n// Angular material modules\nimport {A11yModule} from '@angular/cdk/a11y';\n// import {ClipboardModule} from '@angular/cdk/clipboard';\n// import {DragDropModule} from '@angular/cdk/drag-drop';\nimport {PortalModule} from '@angular/cdk/portal';\n// import {ScrollingModule} from '@angular/cdk/scrolling';\nimport {CdkStepperModule} from '@angular/cdk/stepper';\nimport {CdkTableModule} from '@angular/cdk/table';\nimport {CdkTreeModule} from '@angular/cdk/tree';\nimport {MatAutocompleteModule} from '@angular/material/autocomplete';\nimport {MatBadgeModule} from '@angular/material/badge';\nimport {MatBottomSheetModule} from '@angular/material/bottom-sheet';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatButtonToggleModule} from '@angular/material/button-toggle';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatCheckboxModule} from '@angular/material/checkbox';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatStepperModule} from '@angular/material/stepper';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatDialogModule} from '@angular/material/dialog';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatExpansionModule} from '@angular/material/expansion';\nimport {MatGridListModule} from '@angular/material/grid-list';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatListModule} from '@angular/material/list';\nimport {MatMenuModule} from '@angular/material/menu';\nimport {MatNativeDateModule, MatRippleModule} from '@angular/material/core';\nimport {MatPaginatorModule} from '@angular/material/paginator';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\nimport {MatRadioModule} from '@angular/material/radio';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatSidenavModule} from '@angular/material/sidenav';\nimport {MatSliderModule} from '@angular/material/slider';\nimport {MatSlideToggleModule} from '@angular/material/slide-toggle';\nimport {MatSnackBarModule} from '@angular/material/snack-bar';\nimport {MatSortModule} from '@angular/material/sort';\nimport {MatTableModule} from '@angular/material/table';\nimport {MatTabsModule} from '@angular/material/tabs';\nimport {MatToolbarModule} from '@angular/material/toolbar';\nimport {MatTooltipModule} from '@angular/material/tooltip';\nimport {MatTreeModule} from '@angular/material/tree';\nimport {OverlayModule} from '@angular/cdk/overlay';\nimport { LoginComponent } from './login/login.component';\nimport { RegisterComponent } from './register/register.component';\nimport { DashboardComponent } from './dashboard/dashboard.component';\nimport { InvestmentStrategiesComponent } from './investment-strategies/investment-strategies.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    RegisterComponent,\n    DashboardComponent,\n    InvestmentStrategiesComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    ReactiveFormsModule,\n    FormsModule,\n    RouterModule,\n    routing,\n    \n    MatSliderModule,    \n    A11yModule,\n    CdkStepperModule,\n    CdkTableModule,\n    CdkTreeModule,\n    MatAutocompleteModule,\n    MatBadgeModule,\n    MatBottomSheetModule,\n    MatButtonModule,\n    MatButtonToggleModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatChipsModule,\n    MatStepperModule,\n    MatDatepickerModule,\n    MatDialogModule,\n    MatDividerModule,\n    MatExpansionModule,\n    MatGridListModule,\n    MatIconModule,\n    MatInputModule,\n    MatListModule,\n    MatMenuModule,\n    MatNativeDateModule,\n    MatPaginatorModule,\n    MatProgressBarModule,\n    MatProgressSpinnerModule,\n    MatRadioModule,\n    MatRippleModule,\n    MatSelectModule,\n    MatSidenavModule,\n    MatSliderModule,\n    MatSlideToggleModule,\n    MatSnackBarModule,\n    MatSortModule,\n    MatTableModule,\n    MatTabsModule,\n    MatToolbarModule,\n    MatTooltipModule,\n    MatTreeModule,\n    OverlayModule,\n    PortalModule,\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router'\r\nimport { LoginComponent } from './login/login.component'\r\nimport { RegisterComponent } from './register/register.component'\r\nimport { DashboardComponent } from './dashboard/dashboard.component'\r\nimport { InvestmentStrategiesComponent } from './investment-strategies/investment-strategies.component'\r\n// import { TestIntegrationComponent } from './test-integration/test-integration.component';\r\n\r\nconst appRoutes: Routes = [\r\n\r\n    { path: 'Login', component: LoginComponent },\r\n    { path: 'Register', component: RegisterComponent },\r\n    { path: 'Dashboard', component: DashboardComponent },\r\n    { path: 'Investment-Strategies', component: InvestmentStrategiesComponent },\r\n\r\n   \r\n    //code to redirect to \"COMPONENT\" on page load\r\n    { path: '', component: LoginComponent, pathMatch: 'full'}\r\n\r\n];\r\nexport const routing: ModuleWithProviders = RouterModule.forRoot(appRoutes);\r\n","module.exports = \".custom-card{\\r\\n    background-color:white;\\r\\n    padding:30px;\\r\\n    border-radius: 10px;\\r\\n    box-shadow:0 0 5px rgba(0,0,0,0.4);\\r\\n    cursor: pointer;\\r\\n    margin:0px 65px;\\r\\n    padding-top:80px;\\r\\n    height:350px;\\r\\n    width:300px;\\r\\n    max-width:100%;\\r\\n    margin:0;\\r\\n    margin-bottom:20px;\\r\\n    border : 5px solid white;\\r\\n}\\r\\n\\r\\n.a:hover{\\r\\n    border:5px solid #fec54f;\\r\\n}\\r\\n\\r\\n.b:hover{\\r\\n    border:5px solid #3dea37;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\" style=\\\"padding-top:100px;\\\">\\n  <div class=\\\"row\\\" align=\\\"center\\\">\\n    <div class=\\\"col-12 col-md-6\\\">\\n      <div class=\\\"custom-card a\\\">\\n        <img src=\\\"https://media.discordapp.net/attachments/212893004740952065/751845120285999154/stocks.png\\\" style=\\\"width:120px;margin-bottom:20px\\\">\\n        <p style=\\\"text-transform: uppercase;font-size:18px;color:rgb(0,0,80)\\\">Stocks</p>\\n      </div>\\n    </div>\\n    <div class=\\\"col-12 col-md-6\\\">\\n      <div class=\\\"custom-card b\\\" routerLink=\\\"/Investment-Strategies\\\">\\n        <img src=\\\"https://cdn.discordapp.com/attachments/212893004740952065/751845122429288498/start.png\\\" style=\\\"width:120px;margin-bottom:20px\\\">\\n        <p style=\\\"text-transform: uppercase;font-size:18px;color:rgb(0,0,80)\\\">Investment Strategies</p>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.css']\n})\nexport class DashboardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".custom-card{\\r\\n    margin-bottom:40px;\\r\\n    cursor: pointer;\\r\\n}\"","module.exports = \"<div class=\\\"container\\\" style=\\\"padding-top:100px;\\\">\\n  <h3 style=\\\"color:white;border-bottom:1px solid white;margin-bottom:40px\\\">Investment Strategies</h3>\\n  <div class=\\\"row\\\" align=\\\"center\\\">\\n    <div class=\\\"col-12 col-md-6\\\">\\n      <mat-card class=\\\"custom-card\\\"  data-toggle=\\\"modal\\\" data-target=\\\"#modal1\\\">\\n        Dollar Cost Averaging\\n      </mat-card>\\n    </div>\\n    <div class=\\\"col-12 col-md-6\\\">\\n      <mat-card class=\\\"custom-card\\\" data-toggle=\\\"modal\\\" data-target=\\\"#modal2\\\">\\n        Asset allocation\\n      </mat-card>\\n    </div>\\n    <div class=\\\"col-12 col-md-6\\\">\\n      <mat-card class=\\\"custom-card\\\" data-toggle=\\\"modal\\\" data-target=\\\"#modal3\\\">\\n        Portfolio rebalancing\\n      </mat-card>\\n    </div>\\n    <div class=\\\"col-12 col-md-6\\\">\\n      <mat-card class=\\\"custom-card\\\" data-toggle=\\\"modal\\\" data-target=\\\"#modal4\\\">\\n        Staying invested\\n      </mat-card>\\n    </div>\\n  </div>\\n</div>\\n\\n<div class=\\\"modal fade \\\" id=\\\"modal1\\\" tabindex=\\\"-1\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body\\\">\\n        <mat-card-title>Dollar Cost Averaging</mat-card-title><hr>\\n        <ul>\\n          <li>Dollar Cost Averaging (DCA) is a disciplined, unemotional and balanced approach to making an investment, and involves spreading out your stocks/funds purchases.\\n          </li>\\n          <li>You are essentially investing roughly the same amount of money at regular intervals (e.g every month), regardless of the price when you buy. By doing so, you are lowering investment risks associated with a bear market, which is a market with declining prices, and reducing impact of market volatility.</li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n<div class=\\\"modal fade \\\" id=\\\"modal2\\\" tabindex=\\\"-1\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body\\\">\\n         <mat-card-title>Asset allocation</mat-card-title><hr>\\n        <ul>\\n          <li>an investment strategy that aims to balance risks and rewards by diversifying your resources amongst different types of investments. This will help to limit losses and reduce the fluctuations of investment returns without sacrificing too much potential gain in the long run.\\n          </li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n<div class=\\\"modal fade \\\" id=\\\"modal3\\\" tabindex=\\\"-1\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body\\\">\\n         <mat-card-title>Portfolio rebalancing</mat-card-title><hr>\\n        <ul>\\n          <li>Rebalancing is the process of realigning the weightings of a portfolio of assets.\\n          </li>\\n          <li>It involves periodically buying or selling assets in a portfolio to maintain an original or desired level of asset allocation or risk.</li>\\n          <li>For example, say an original target asset allocation was 50% stocks and 50% bonds. If the stocks performed well during the period, it could have increased the stock weighting of the portfolio to 70%. Since stocks carry a greater risk, the investor may then decide to sell some stocks and buy bonds to get the portfolio back to the original target allocation of 50/50.</li>\\n          <li>‘Sell high, buy low’</li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</div>\\n\\n\\n<div class=\\\"modal fade \\\" id=\\\"modal4\\\" tabindex=\\\"-1\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n  <div class=\\\"modal-dialog modal-dialog-centered\\\">\\n    <div class=\\\"modal-content\\\">\\n      <div class=\\\"modal-body\\\">\\n         <mat-card-title>Staying invested</mat-card-title><hr>\\n        <ul>\\n          <li>Staying invested to capture long-term market return is key to a successful investing experience.\\n\\n          </li>\\n          <li>Investors may make poor decisions when emotions take over, tending to buy out of excitement when the market is going up and sell out of fear when the market is falling. Markets ultimately do stabilize, and when they do, those who stay invested may benefit more than those who don't.</li>\\n        </ul>\\n      </div>\\n    </div>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-investment-strategies',\n  templateUrl: './investment-strategies.component.html',\n  styleUrls: ['./investment-strategies.component.css']\n})\nexport class InvestmentStrategiesComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \".login-container{\\r\\n    background-color:white;max-width:450px;padding:40px 20px;border-radius:10px;box-shadow: 0 0 5px rgba(0,0,0,0.3);\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\" style=\\\"padding-top:100px;\\\" align=\\\"center\\\">\\n  <div class=\\\"login-container\\\">\\n    <h3 class=\\\"mb-4\\\">Login</h3>\\n    <div class=\\\"form-group\\\">\\n      <mat-form-field appearance=\\\"standard\\\">\\n        <mat-label>Email</mat-label>\\n        <input matInput>\\n        <mat-icon matSuffix style=\\\"margin-left:8px;margin-right:8px;\\\">email</mat-icon>\\n      </mat-form-field>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <mat-form-field appearance=\\\"standard\\\">\\n        <mat-label>Password</mat-label>\\n        <input matInput [type]=\\\"hide ? 'password' : 'text'\\\">\\n        <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\n          [attr.aria-pressed]=\\\"hide\\\">\\n          <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n        </button>\\n      </mat-form-field>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <button class=\\\"btn btn-yellow\\\" style=\\\"width:244px;\\\" (click)=\\\"login()\\\">Login</button>\\n    </div>\\n    <a routerLink=\\\"/Register\\\" class=\\\"btn btn-outline-navy\\\" style=\\\"width:244px;\\\">Register</a>\\n  </div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute, ParamMap } from '@angular/router';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  hide = true;\n\n  constructor(private router:Router) { }\n\n  ngOnInit() {\n  }\n\n  login(){\n    this.router.navigateByUrl(\"Dashboard\")\n  }\n\n}\n","module.exports = \".custom-card{\\r\\n    padding:10px;\\r\\n    box-shadow:0 0 4px rgba(0,0,0,0.3);\\r\\n    background-color:white;\\r\\n    cursor: pointer;\\r\\n    margin-bottom:15px;\\r\\n}\\r\\n\\r\\n.custom-card.active{\\r\\n   background-color:  rgb(22,44,83)!important;\\r\\n   color:white!important;\\r\\n}\\r\\n\\r\\n.register-container{\\r\\n    box-shadow:0 0 5px rgba(0,0,0,0.3);max-width:800px;border-radius:10px;margin-bottom:50px;\\r\\n}\\r\\n\"","module.exports = \"<!-- <button mat-raised-button (click)=\\\"isLinear = !isLinear\\\" id=\\\"toggle-linear\\\">\\n  {{!isLinear ? 'Enable linear mode' : 'Disable linear mode'}}\\n</button> -->\\n\\n<div align=\\\"center\\\" class=\\\"container\\\" style=\\\"padding-top:100px;\\\">\\n\\n  <mat-vertical-stepper [linear]=\\\"isLinear\\\" *ngIf=\\\"!desktop\\\" #stepper class=\\\"register-container\\\">\\n    <mat-step [stepControl]=\\\"firstFormGroup\\\">\\n      <form [formGroup]=\\\"firstFormGroup\\\">\\n        <ng-template matStepLabel>Register an Account</ng-template>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\">\\n            <mat-label>E-mail</mat-label>\\n            <input matInput formControlName=\\\"email\\\">\\n            <mat-icon matSuffix style=\\\"margin: 0px 8px;\\\"></mat-icon>\\n          </mat-form-field>\\n          <div class=\\\"text-danger validation-text-margin\\\"\\n            *ngIf=\\\"firstFormGroup.controls.email.invalid && (firstFormGroup.controls.email.dirty && firstFormGroup.controls.email.touched)\\\">\\n            <div *ngIf=\\\"firstFormGroup.controls.email.errors.email\\\">\\n              <small>Please enter a valid email</small>\\n            </div>\\n            <div *ngIf=\\\"firstFormGroup.controls.email.errors.required\\\">\\n              <small>This field is required</small>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\">\\n            <mat-label>Full Name</mat-label>\\n            <input matInput formControlName=\\\"name\\\">\\n            <mat-icon matSuffix style=\\\"margin: 0px 8px;\\\"></mat-icon>\\n          </mat-form-field>\\n          <div\\n            *ngIf=\\\"firstFormGroup.controls.name.invalid && (firstFormGroup.controls.name.dirty && firstFormGroup.controls.name.touched)\\\">\\n            <div *ngIf=\\\"this.firstFormGroup.controls.name.errors.required\\\">\\n              <small>This field is required</small>\\n            </div>\\n          </div>\\n        </div>\\n        <div formGroupName=\\\"pwSet\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Password</mat-label>\\n              <input formControlName=\\\"pw\\\" matInput [type]=\\\"hide ? 'password' : 'text'\\\">\\n              <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\n                [attr.aria-pressed]=\\\"hide\\\">\\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n              </button>\\n            </mat-form-field>\\n            <div class=\\\"text-danger\\\"\\n              *ngIf=\\\"firstFormGroup.controls.pwSet['controls'].pw.invalid && (firstFormGroup.controls.pwSet['controls'].pw.dirty && firstFormGroup.controls.pwSet['controls'].pw.touched)\\\">\\n              <small>Password must be at least 6 letters</small>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Confirm Password</mat-label>\\n              <input formControlName=\\\"cfmPw\\\" matInput [type]=\\\"hide2 ? 'password' : 'text'\\\">\\n              <button mat-icon-button matSuffix (click)=\\\"hide2 = !hide2\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\n                [attr.aria-pressed]=\\\"hide\\\">\\n                <mat-icon>{{hide2 ? 'visibility_off' : 'visibility'}}</mat-icon>\\n              </button>\\n            </mat-form-field>\\n            <div class=\\\"text-danger\\\"\\n              *ngIf=\\\"firstFormGroup.controls.pwSet.hasError('notmatch') && (firstFormGroup.controls.pwSet['controls'].cfmPw.dirty && firstFormGroup.controls.pwSet['controls'].cfmPw.touched)\\\">\\n              <small *ngIf=\\\"firstFormGroup.controls.pwSet.hasError('notmatch')\\\">\\n                Passwords do not match!\\n              </small>\\n            </div>\\n          </div>\\n        </div>\\n        <div>\\n          <button mat-button (click)=\\\"register(stepper)\\\">Register</button>\\n        </div>\\n      </form>\\n    </mat-step>\\n    <!-- #docregion label -->\\n    <mat-step [stepControl]=\\\"secondFormGroup\\\" label=\\\"Set your user profile\\\">\\n      <!-- #enddocregion label -->\\n      <form [formGroup]=\\\"secondFormGroup\\\">\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\" style=\\\"width:100%;max-width:300px;\\\">\\n            <mat-label>Age</mat-label>\\n            <mat-select>\\n              <mat-option *ngFor=\\\"let a of age\\\" value=\\\"{{a}}\\\">{{a}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\" style=\\\"width:100%;max-width:300px;\\\">\\n            <mat-label>Purpose of investment</mat-label>\\n            <mat-select>\\n              <mat-option *ngFor=\\\"let investment of purposeOfInvestment\\\" value=\\\"{{investment}}\\\">{{investment}}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\" style=\\\"width:100%;max-width:300px\\\">\\n            <mat-label>Amount</mat-label>\\n            <input matInput type=\\\"number\\\" class=\\\"example-right-align\\\">\\n            <span matPrefix>$&nbsp;</span>\\n            <span matSuffix>.00</span>\\n          </mat-form-field>\\n        \\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label>Preferred industries to invest in</label>\\n          <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-12 col-md-4\\\" *ngFor=\\\"let industry of preferredIndustry; let i = index\\\" align=\\\"center\\\">\\n                <div class=\\\"custom-card\\\" id=\\\"preferred-industry-{{i}}\\\" (click)=\\\"selectIndustry(i, industry)\\\">\\n                  {{industry}}\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div>\\n          <button mat-button (click)=\\\"saveProfile(stepper)\\\">Next</button>\\n          <button mat-button matStepperNext>Skip</button>\\n        </div>\\n      </form>\\n    </mat-step>\\n    <mat-step>\\n      <ng-template matStepLabel>Done</ng-template>\\n      <p>Registration Complete!</p>\\n      <div>\\n        <button mat-button routerLink=\\\"/Dashboard\\\">Continue to Dashboard</button>\\n      </div>\\n    </mat-step>\\n  </mat-vertical-stepper>\\n\\n  <mat-horizontal-stepper [linear]=\\\"isLinear\\\" *ngIf=\\\"desktop\\\"  #stepper class=\\\"register-container\\\">\\n    <mat-step [stepControl]=\\\"firstFormGroup\\\">\\n      <form [formGroup]=\\\"firstFormGroup\\\">\\n        <ng-template matStepLabel>Register an Account</ng-template>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\">\\n            <mat-label>E-mail</mat-label>\\n            <input matInput formControlName=\\\"email\\\">\\n            <mat-icon matSuffix style=\\\"margin: 0px 8px;\\\"></mat-icon>\\n          </mat-form-field>\\n          <div class=\\\"text-danger validation-text-margin\\\"\\n            *ngIf=\\\"firstFormGroup.controls.email.invalid && (firstFormGroup.controls.email.dirty && firstFormGroup.controls.email.touched)\\\">\\n            <div *ngIf=\\\"firstFormGroup.controls.email.errors.email\\\">\\n              <small>Please enter a valid email</small>\\n            </div>\\n            <div *ngIf=\\\"firstFormGroup.controls.email.errors.required\\\">\\n              <small>This field is required</small>\\n            </div>\\n          </div>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\">\\n            <mat-label>Full Name</mat-label>\\n            <input matInput formControlName=\\\"name\\\">\\n            <mat-icon matSuffix style=\\\"margin: 0px 8px;\\\"></mat-icon>\\n          </mat-form-field>\\n          <div\\n            *ngIf=\\\"firstFormGroup.controls.name.invalid && (firstFormGroup.controls.name.dirty && firstFormGroup.controls.name.touched)\\\">\\n            <div *ngIf=\\\"this.firstFormGroup.controls.name.errors.required\\\">\\n              <small>This field is required</small>\\n            </div>\\n          </div>\\n        </div>\\n        <div formGroupName=\\\"pwSet\\\">\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Password</mat-label>\\n              <input formControlName=\\\"pw\\\" matInput [type]=\\\"hide ? 'password' : 'text'\\\">\\n              <button mat-icon-button matSuffix (click)=\\\"hide = !hide\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\n                [attr.aria-pressed]=\\\"hide\\\">\\n                <mat-icon>{{hide ? 'visibility_off' : 'visibility'}}</mat-icon>\\n              </button>\\n            </mat-form-field>\\n            <div class=\\\"text-danger\\\"\\n              *ngIf=\\\"firstFormGroup.controls.pwSet['controls'].pw.invalid && (firstFormGroup.controls.pwSet['controls'].pw.dirty && firstFormGroup.controls.pwSet['controls'].pw.touched)\\\">\\n              <small>Password must be at least 6 letters</small>\\n            </div>\\n          </div>\\n          <div class=\\\"form-group\\\">\\n            <mat-form-field appearance=\\\"standard\\\">\\n              <mat-label>Confirm Password</mat-label>\\n              <input formControlName=\\\"cfmPw\\\" matInput [type]=\\\"hide2 ? 'password' : 'text'\\\">\\n              <button mat-icon-button matSuffix (click)=\\\"hide2 = !hide2\\\" [attr.aria-label]=\\\"'Hide password'\\\"\\n                [attr.aria-pressed]=\\\"hide\\\">\\n                <mat-icon>{{hide2 ? 'visibility_off' : 'visibility'}}</mat-icon>\\n              </button>\\n            </mat-form-field>\\n            <div class=\\\"text-danger\\\"\\n              *ngIf=\\\"firstFormGroup.controls.pwSet.hasError('notmatch') && (firstFormGroup.controls.pwSet['controls'].cfmPw.dirty && firstFormGroup.controls.pwSet['controls'].cfmPw.touched)\\\">\\n              <small *ngIf=\\\"firstFormGroup.controls.pwSet.hasError('notmatch')\\\">\\n                Passwords do not match!\\n              </small>\\n            </div>\\n          </div>\\n        </div>\\n        <div>\\n          <button mat-button (click)=\\\"register(stepper)\\\">Register</button>\\n        </div>\\n      </form>\\n    </mat-step>\\n    <!-- #docregion label -->\\n    <mat-step [stepControl]=\\\"secondFormGroup\\\" label=\\\"Set your user profile\\\">\\n      <!-- #enddocregion label -->\\n      <form [formGroup]=\\\"secondFormGroup\\\">\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\" style=\\\"width:100%;max-width:300px;\\\">\\n            <mat-label>Age</mat-label>\\n            <mat-select>\\n              <mat-option *ngFor=\\\"let a of age\\\" value=\\\"{{a}}\\\">{{a}}</mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\" style=\\\"width:100%;max-width:300px;\\\">\\n            <mat-label>Purpose of investment</mat-label>\\n            <mat-select>\\n              <mat-option *ngFor=\\\"let investment of purposeOfInvestment\\\" value=\\\"{{investment}}\\\">{{investment}}\\n              </mat-option>\\n            </mat-select>\\n          </mat-form-field>\\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <mat-form-field appearance=\\\"standard\\\" style=\\\"width:100%;max-width:300px\\\">\\n            <mat-label>Amount</mat-label>\\n            <input matInput type=\\\"number\\\" class=\\\"example-right-align\\\">\\n            <span matPrefix>$&nbsp;</span>\\n            <span matSuffix>.00</span>\\n          </mat-form-field>\\n        \\n        </div>\\n        <div class=\\\"form-group\\\">\\n          <label>Preferred industries to invest in</label>\\n          <div class=\\\"container\\\">\\n            <div class=\\\"row\\\">\\n              <div class=\\\"col-12 col-md-4\\\" *ngFor=\\\"let industry of preferredIndustry; let i = index\\\" align=\\\"center\\\">\\n                <div class=\\\"custom-card\\\" id=\\\"preferred-industry-{{i}}\\\" (click)=\\\"selectIndustry(i, industry)\\\">\\n                  {{industry}}\\n                </div>\\n              </div>\\n            </div>\\n          </div>\\n        </div>\\n        <div>\\n          <button mat-button (click)=\\\"saveProfile(stepper)\\\">Next</button>\\n          <button mat-button matStepperNext>Skip</button>\\n        </div>\\n      </form>\\n    </mat-step>\\n    <mat-step>\\n      <ng-template matStepLabel>Done</ng-template>\\n      <p>Registration Complete!</p>\\n      <div>\\n        <button mat-button routerLink=\\\"/Dashboard\\\">Continue to Dashboard</button>\\n      </div>\\n    </mat-step>\\n  </mat-horizontal-stepper>\\n</div>\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators, ReactiveFormsModule} from '@angular/forms';\nimport { MatStepper } from '@angular/material/stepper';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n  isLinear = false;\n  firstFormGroup: FormGroup;\n  secondFormGroup: FormGroup;\n  hide = true\n  hide2=true\n  age = []\n  preferredIndustry = [\"Technology\", \"Real Estate\", \"Finance\"]\n  purposeOfInvestment = [\"Build wealth\", \"Retirement\", \"Reach financial goals\", \"Start business\", \"Support others\"]\n  selectedIndustries = []\n  desktop =true\n\n\n  constructor(private formBuilder: FormBuilder) { }\n\n  ngOnInit() {\n    if(window.innerWidth < 700){\n      this.desktop = false\n      \n    }\n    this.firstFormGroup = this.formBuilder.group({\n      email: ['', [Validators.required, Validators.email] ],\n      name: ['',Validators.required],\n      pwSet: this.formBuilder.group ({\n        pw: ['', [Validators.required, Validators.minLength(6)]],\n        cfmPw: ['',[Validators.required]]\n      }, {validator: this.passwordMatchValidator}),\n    });\n    this.secondFormGroup = this.formBuilder.group({\n      secondCtrl: ['', Validators.required]\n    });\n\n    for(var i = 12 ; i < 120; i++){\n      this.age.push(i + 1)\n    }\n  }\n\n  passwordMatchValidator(myForm: FormGroup) {\n\n    var userpassword = myForm.controls.pw.value;\n    var confirmpassword = myForm.controls.cfmPw.value;\n\n    if (!(userpassword === confirmpassword)) return { 'notmatch': true };\n    return null;\n  }\n\n\n  register(stepper: MatStepper){\n    console.log(\"test\")\n    stepper.next();\n  }\n\n  saveProfile(stepper:MatStepper){\n    stepper.next()\n  }\n\n  selectIndustry(i:number, industry:string){\n\n    if(this.selectedIndustries.includes(industry)){\n      this.selectedIndustries.splice(this.selectedIndustries.indexOf(industry),1)\n      document.getElementById(\"preferred-industry-\" + i).classList.remove(\"active\")\n    }\n    else {\n      this.selectedIndustries.push(industry)\n      document.getElementById(\"preferred-industry-\" + i).classList.add(\"active\")\n    }\n    console.log(this.selectedIndustries)\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}